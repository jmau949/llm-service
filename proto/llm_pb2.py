# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: llm.proto
# Protobuf Python Version: 4.25.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\tllm.proto\x12\x03llm\"\xc7\x01\n\nLLMRequest\x12\x0e\n\x06prompt\x18\x01 \x01(\t\x12.\n\nparameters\x18\x02 \x01(\x0b\x32\x1a.llm.LLMRequest.Parameters\x1ay\n\nParameters\x12\x13\n\x0btemperature\x18\x01 \x01(\x02\x12\x12\n\nmax_tokens\x18\x02 \x01(\x05\x12\r\n\x05top_p\x18\x03 \x01(\x02\x12\x18\n\x10presence_penalty\x18\x04 \x01(\x02\x12\x19\n\x11\x66requency_penalty\x18\x05 \x01(\x02\"0\n\x0bLLMResponse\x12\x0c\n\x04text\x18\x01 \x01(\t\x12\x13\n\x0bis_complete\x18\x02 \x01(\x08\"#\n\x13LLMCompleteResponse\x12\x0c\n\x04text\x18\x01 \x01(\t2z\n\nLLMService\x12\x35\n\x0eGenerateStream\x12\x0f.llm.LLMRequest\x1a\x10.llm.LLMResponse0\x01\x12\x35\n\x08Generate\x12\x0f.llm.LLMRequest\x1a\x18.llm.LLMCompleteResponseb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'llm_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  DESCRIPTOR._options = None
  _globals['_LLMREQUEST']._serialized_start=19
  _globals['_LLMREQUEST']._serialized_end=218
  _globals['_LLMREQUEST_PARAMETERS']._serialized_start=97
  _globals['_LLMREQUEST_PARAMETERS']._serialized_end=218
  _globals['_LLMRESPONSE']._serialized_start=220
  _globals['_LLMRESPONSE']._serialized_end=268
  _globals['_LLMCOMPLETERESPONSE']._serialized_start=270
  _globals['_LLMCOMPLETERESPONSE']._serialized_end=305
  _globals['_LLMSERVICE']._serialized_start=307
  _globals['_LLMSERVICE']._serialized_end=429
# @@protoc_insertion_point(module_scope)
